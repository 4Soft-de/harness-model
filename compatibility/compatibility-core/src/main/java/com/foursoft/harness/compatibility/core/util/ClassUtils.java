/*-
 * ========================LICENSE_START=================================
 * compatibility-core
 * %%
 * Copyright (C) 2020 - 2023 4Soft GmbH
 * %%
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * =========================LICENSE_END==================================
 */
package com.foursoft.harness.compatibility.core.util;

/**
 * Utility class for class determination operations.
 */
public class ClassUtils {

    /**
     * The Object name suffix for generated ByteBuddy-Proxy classes.
     */
    public static final String BYTE_BUDDY = "$ByteBuddy";

    private ClassUtils() {
        // hide
    }

    /**
     * Gets the real class from the given class in case the given class is a ByteBuddy Proxy class.
     *
     * @param clazz Either a "real" class or a ByteBuddy Proxy class.
     * @return The real class.
     */
    public static Class<?> getNonProxyClass(final Class<?> clazz) {
        try {
            return getMappedClass(clazz, clazz.getPackageName());
        } catch (final ClassNotFoundException e) {
            return clazz;  // Should not happen.
        }
    }

    /**
     * Gets the given class but with the given package name.
     * Also returns the real class if a ByteBuddy Proxy class was given.
     *
     * @param clazz       Either a "real" class or a ByteBuddy Proxy class.
     * @param packageName The package name to which the class will be mapped.
     * @return The mapped Class.
     * @throws ClassNotFoundException For non-existing classes.
     */
    public static Class<?> getMappedClass(final Class<?> clazz, final String packageName)
            throws ClassNotFoundException {
        final String simpleNameSuperClass = clazz.getSuperclass().getSimpleName();
        final String simpleName = clazz.getSimpleName();

        final String targetClassName = !simpleNameSuperClass.equals(simpleName) && simpleName.contains(BYTE_BUDDY)
                ? simpleNameSuperClass
                : simpleName;
        final String classWithPackage = String.join(".", packageName, targetClassName);

        return Class.forName(classWithPackage);
    }

}
