package com.foursoft.harness.compatibility.core.util;

/**
 * Utility class for class determination operations.
 */
public class ClassUtils {

    /**
     * The Object name suffix for generated ByteBuddy-Proxy classes.
     */
    public static final String BYTE_BUDDY = "$ByteBuddy";

    private ClassUtils() {
        // hide
    }

    /**
     * Gets the real class from the given class in case the given class is a ByteBuddy Proxy class.
     *
     * @param clazz Either a "real" class or a ByteBuddy Proxy class.
     * @return The real class.
     */
    public static Class<?> getNonProxyClass(final Class<?> clazz) {
        try {
            return getMappedClass(clazz, clazz.getPackageName());
        } catch (final ClassNotFoundException e) {
            return clazz;  // Should not happen.
        }
    }

    /**
     * Gets the given class but with the given package name.
     * Also returns the real class if a ByteBuddy Proxy class was given.
     *
     * @param clazz       Either a "real" class or a ByteBuddy Proxy class.
     * @param packageName The package name to which the class will be mapped.
     * @return The mapped Class.
     * @throws ClassNotFoundException For non-existing classes.
     */
    public static Class<?> getMappedClass(final Class<?> clazz, final String packageName)
            throws ClassNotFoundException {
        final String simpleNameSuperClass = clazz.getSuperclass().getSimpleName();
        final String simpleName = clazz.getSimpleName();

        final String targetClassName = !simpleNameSuperClass.equals(simpleName) && simpleName.contains(BYTE_BUDDY)
                ? simpleNameSuperClass
                : simpleName;
        final String classWithPackage = String.join(".", packageName, targetClassName);

        return Class.forName(classWithPackage);
    }

}
